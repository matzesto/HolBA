!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
addtmUDs	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val addtmUDs = term_grammar.add_deltas tmUDs$/;"	v	language:SML
addtyUDs	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val addtyUDs = type_grammar.apply_deltas tyUDs$/;"	v	language:SML
find	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^    fun find s = Redblackmap.find (thydata,s)$/;"	f	language:SML
minimalBinaryTheory	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^structure minimalBinaryTheory :> minimalBinaryTheory =$/;"	r	language:SML
minimalBinary_grammars	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val minimalBinary_grammars = $/;"	v	language:SML
minimalBinary_grammars	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val minimalBinary_grammars = merge_grammars ["bir_nzcv_intros",$/;"	v	language:SML
op	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  fun op minimal_arm8_THM _ = ()$/;"	f	language:SML
op	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val op minimal_arm8_THM = TDB.find "minimal_arm8_THM"$/;"	v	language:SML
region_map	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val (region_map, minimal_sections) = read_disassembly_file_regions$/;"	v	language:SML
TDB	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  structure TDB = struct$/;"	r	language:SML
thm_arm8	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val (thm_arm8, errors) = bmil_arm8.bir_lift_prog_gen ((Arbnum.fromInt 0),$/;"	v	language:SML
thydata	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^    val thydata = $/;"	v	language:SML
tyUDs	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val (tyUDs, tmUDs) = GrammarDeltas.thy_deltas{thyname="minimalBinary"}$/;"	v	language:SML
UTOFF	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f$/;"	f	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val _ = export_theory();$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val _ = new_theory "minimalBinary";$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val _ = Parse.current_backend := PPBackEnd.vt100_terminal;$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val _ = print_with_style [Bold, Underline] "Lifting minimal-aarch64.da\\n";$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val _ = save_thm ("minimal_arm8_THM", thm_arm8);$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryScript.sml	/^val _ = set_trace "bir_inst_lifting.DEBUG_LEVEL" 2;$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val _ = if !Globals.print_thy_loads$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val _ = Parse.grammarDB_insert("minimalBinary",minimalBinary_grammars)$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^  val _ = Parse.temp_set_grammars (addtyUDs (Parse.type_grammar()), addtmUDs (Parse.term_grammar()))$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^val _ = if !Globals.print_thy_loads then TextIO.print "done\\n" else ()$/;"	v	language:SML
_	/home/ubuntu/dev/HolBA/src/tools/symbExec/examples/minimal/minimalBinaryTheory.sml	/^val _ = Theory.load_complete "minimalBinary"$/;"	v	language:SML
